[
  {
    "path": "posts/welcome/",
    "title": "Welcome to R for Data Science and Analysis",
    "description": "Welcome to our new blog, R for Data Science and Analysis. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Tang Yue",
        "url": {}
      }
    ],
    "date": "2021-07-14",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-07-14T11:34:38+08:00",
    "input_file": "welcome.knit.md"
  },
  {
    "path": "posts/2021-07-14-the-sharpe-ratio/",
    "title": "VAST Challenge 2021 - Mini-Challenge 3 ",
    "description": "Using Visual Analytics to Support Decision Making to Solve The kronos Incident.",
    "author": [
      {
        "name": "Tang Yue",
        "url": {}
      }
    ],
    "date": "2021-07-14",
    "categories": [],
    "contents": "\r\n1. Overview\r\nThe 2021 Visual Analytics Science and Technology (VAST) Challenge presented researchers with a single fictitious scenario: the disappearance of staff members of the GASTech oil and gas company on location on the island of Kronos. A group named the Protectors of Kronos (POK) was the prime suspect in the disappearance. Three mini-challenges and a grand challenge were offered. For more information, please see VAST Challenge 2021.\r\nThis module will research Mini-Challenge 3 which includes multiple types of text data for participants to feature real-time streaming social media and emergency service data for participants to provide hostage and kidnapper information.This challenge has 3 tasks and questions and asked the participants to integrate results to evaluate the changing levels of risk to the public and recommend actions.\r\n2. Data preparation and Exploration\r\n2.1 Data Source\r\nThere are three dataset provides in Mini-Challenge 3 :\r\nMicroblog records that have been identified by automated filters as being potentially relevant to the ongoing incident\r\nText transcripts of emergency dispatches by the Abila, Kronos local police and fire departments.\r\nmaps of Abila and background documents.\r\n\r\nThe data of Microblog and text transcripts of emergency dispatches are found in three segments:\r\nSegment 1 :“csv-1700-1830.csv” - covers the time period from 1700 to 1830 Abila time on January 23.\r\nSegment 2: \"csv-1831-2000.csv’- covers the time period from 1830 to 2000 Abila time on January 23.\r\nSegment 3: “csv-2001-2131.csv” - covers the time period from 2000 to shortly after 2130 Abila time on January 23.\r\n\r\n2.2 Install and load R package\r\nIn this module, the tidyverse, ggforce, GGally, plotly R and parcoords packages will be used, which could be seen from below code chunk.\r\n\r\n\r\npackages = c('tidyverse','dplyr','readr','tm','lubridate','wordcloud','SnowballC', 'UpSetR','ggplot2','topicmodels','stringr','clock', 'tidytext','tokenizers','DT')\r\nfor (p in packages){\r\n  if(!require(p, character.only = T)){\r\n  install.packages(p)\r\n  }\r\n  library(p,character.only = T)\r\n}\r\n\r\n\r\n\r\n2.3 Import dataset and combine data\r\nThe data of Microblog records and emergency calls are stored in separate csv files. And three csv files share same columns but data generate from different date, which is shown below.\r\n\r\nFirstly, we need to combine 3 files into one consolidated file, which is necessary for the following analysis. In this step, package tidyverse would be used.The following R code shows the process of data consolidation, then three datasets with different date have been integrated into one file.\r\n\r\n\r\nlibrary(tidyverse)\r\ntable1 <- read.csv(\"csv-1700-1830.csv\")\r\ntable2 <- read.csv(\"csv-1831-2000.csv\")\r\ntable3 <- read.csv(\"csv-2001-2131.csv\")\r\ndata <- rbind(table1, table2,table3)\r\n\r\n\r\n\r\nNext, we would separate ‘ccdata’ and ‘mbdata’ from “data”, they respectively represent microblog record and emergency call center data collected by the Abila, Kronos local police and fire departments.\r\n\r\n\r\nccdata <- subset(data, type == \"ccdata\")\r\nmbdata <- subset(data, type == \"mbdata\")\r\n\r\n\r\n\r\n2.4 Modifying Date format\r\nconverting character objects to dates can be made easier by using the lubridate package, which would be used to convert date type from ‘yyyymmddhhmmss’ to ‘yyyy-mm-dd hh:mm:ss’, and create a new column ‘date’ in data, and the code chunk could be seen below.\r\n\r\n\r\ndata$date.yyyyMMddHHmmss. <- ymd_hms(data$date.yyyyMMddHHmmss.)\r\n\r\n\r\n\r\nRename “date.yyyyMMddHHmmss.” in data into “date” with concise format.\r\n\r\n\r\nnames(data)[names(data) == \"date.yyyyMMddHHmmss.\"] <- \"date\"\r\n\r\n\r\n\r\n2.5 Remove Special Chacaters\r\nIn this step, we would like to use package stringr to clean special characters, including \" @, < , ˜ \" and none English words.\r\nBesides, there are a lot of repeat records which forward from other publisher that begin with “RT”. The repeat records represent one review or voice, so we keep it. However, avoiding meaningless “RT” affect the word frequency, we move “RT” in ahead.\r\n\r\n\r\ndata$message <- str_replace_all(data$message,fixed(\"@\"),\"\")\r\ndata$message <- str_replace_all(data$message,fixed(\"<\"),\"\")\r\ndata$message <- str_replace_all(data$message,fixed(\"˜\"),\"\")\r\ndata$message <- str_replace_all(data$message,\"[\\u4e00-\\u9fa5]+\", \"\")\r\ndata$message <- str_replace_all(data$message,fixed(\"RT\"),\"\")\r\n\r\n\r\n\r\n2.6 Classify Record\r\nBased on content of data provided, we classified records into three segments, Junk, Spam and Meaningful records, using stringr, dplyrpackage.\r\nClass\r\nDefinition\r\nJunk\r\nreferred to advertisements or financial purpose reports. The below code chunk is used to identify the spam reports.\r\nMeaningful\r\nrefers to informative records which spread real news about ongoing or impending events happen in Aliba.\r\nSpam\r\nrepresents the no meaningful and irrelevant or inappropriate messages post online.\r\nclassify Junk records: The str_detect() function is used to detect patterns of Junk records. And the below code chunk is used to identify the junk reports.|\r\n\r\n\r\njunk <- data %>%\r\n  filter(str_detect(message,\"#artists|#badcreadit|#cars\r\n  |#followme|#nobanks|#nobank|#meds|#cancer|#bestfood\r\n  |#workAtHome|#gettingFired|#pharmacyripoff|#iThing\r\n  |homeworkers.kronos|#abilasFinest|#hungry|Easy make.money|\r\n  #iThing|visit this|#eastAbila link|#abilajobs|clickhere|\r\n  #welksFurniture|#swat|#bugs|visit this link|this site\")) \r\n\r\njunk <- data %>%\r\n  filter(str_detect(author,\"junkman|carjunkers|eazymoney|\r\n  junk99902|junkieduck113|junkman377|junkman995\"))\r\n\r\n\r\n\r\nClassify Spam records: Using the same way, we detect Spam records by below code chunk and classify corresponding emails into Spam class.\r\n\r\n\r\nspam <- data %>%\r\n  filter(str_detect(message,\"Grammar||#POKlove#Lucio|#getoverit\r\n  |#baa-baa| #HomelessAwareness|#trylove|#pictures\r\n  |#nobodycares|#abilafire|#wishfulthinking|Viktor-E\r\n  |#hogwash|#RememberElian|#standoff|work from home|\r\n  #blackvansrules|#schaber|#abilacityPark|#downwithkronos\"))\r\n\r\nspam <- data %>%\r\n  filter(str_detect(author,\"KronosQuoth|Clevvah4Evah|FriendsOfKronos|\r\n  jaquesjoyce101|klingon4real|michelleR|SaveOurWildlands|\r\n  AbilaAllFaith|footfingers|GreyCatCollectibles|luvwool\"))\r\n\r\n\r\n\r\nClassify Meaningful records: Apart from the Spam and Junk, the rest of emails would be classified into meaningful records, which could be received by the below code chunk.In this step, anti_join() function in dplyr package would be used.\r\n\r\n\r\nmeaningful <- anti_join(data,junk,by=\"message\") \r\nmeaningful <- anti_join(meaningful,spam,by=\"message\")\r\n\r\n\r\n\r\nNow, all records in Microblog data have been labeled with responding class- Junk, Meanigful and Spam.\r\nNext, we add “class” as a new column to represent the label of every record.\r\n\r\n\r\njunk$class <- \"junk\"\r\nspam$class <- \"spam\"\r\nmeaningful$class <- \"meaningful\"\r\n\r\n\r\n\r\nUsing below code chunk, we combine Junk, Spam and Meaningful records into one dataframe which was renamed as data_classed. In this preprocessing step, the rbind function of dplry package would be used.\r\n\r\n\r\ndata_classed <- rbind(spam, junk, meaningful)\r\n\r\n\r\n\r\nIn the previous pre-processing step, we keep # as a tag to identify Junk, Spam and meaningful records. After records classifying, we move “#” in the tag using below code chunk.\r\n\r\n\r\ndata_classed$message <- str_replace_all(data_classed$message,fixed(\"#\"),\"\")\r\n\r\n\r\n\r\n2.7 Data Tokenization and Word Counts\r\nAfter cleaning the text data, the next step is to segment sentence and count the occurrence of each word, to identify frequent words in records.\r\nIn this code chunk below, unnest_tokens() function from tidytext package is used to split the sentences into tokens, while stop_words() is used to remove stop-words.\r\n\r\n\r\ndata_classed_token <- data_classed %>%\r\n  unnest_tokens(word, message) %>%\r\n  filter(str_detect(word, \"[a-z']$\"),\r\n         !word %in% stop_words$word,\r\n         !word %in% c(\"aliba\",\"abila\")) %>%\r\n  count(word,sort = TRUE) %>%\r\n  top_n(15) %>%\r\n  mutate(word = fct_inorder(word))\r\nhead(data_classed_token,15)\r\n\r\n\r\n                    word    n\r\n1               pokrally 1373\r\n2             kronosstar  905\r\n3                    pok  483\r\n4                   fire  400\r\n5              abilapost  396\r\n6                 police  299\r\n7                  rally  292\r\n8                   life  210\r\n9                 people  194\r\n10       centralbulletin  176\r\n11 homelandilluminations  159\r\n12                   apd  158\r\n13               grammar  154\r\n14               success  141\r\n15               dancing  133\r\n\r\n3. Data Visualization\r\nQuestion 1:\r\nUsing visual analytics, characterize the different types of content in the dataset. What distinguishes meaningful event reports from typical chatter from junk or spam?\r\nInstead of counting individual words, you can also count words within by class by using the code chunk below.\r\n\r\n\r\n#token_by_class <- data_classed_token %>%\r\n#  count(class, word, sort = TRUE) %>%\r\n#  ungroup()\r\n\r\n\r\n\r\n\r\n\r\nset.seed(1234)\r\nwordcloud(data_classed_token$word,\r\n          #data_classed_token$n,\r\n          max.words = 200)\r\n\r\n\r\n\r\n\r\n\r\n\r\n#set.seed(1234)\r\n#wordcloud(token_by_class$word,\r\n#          token_by_class$n,\r\n#         max.words = 200)\r\n\r\n\r\n\r\nThe code chunk below uses bind_tf_idf() of tidytext to compute and bind the term frequency, inverse document frequency and ti-idf of a tidy text dataset to the dataset.\r\n\r\n\r\n#tf_idf <- token_by_class %>%\r\n#  bind_tf_idf(word,class, n) %>%\r\n#  arrange(desc(tf_idf))\r\n\r\n\r\n\r\nVisualising tf-idf as interactive table\r\nTable below is an interactive table created by using datatable().\r\n\r\n\r\n#DT::datatable(tf_idf, filter = 'top') %>% \r\n#  formatRound(columns = c('tf', 'idf', \r\n#                          'tf_idf'), \r\n#              digits = 3) %>%\r\n#  formatStyle(0, \r\n#              target = 'row', \r\n#              lineHeight='25%')\r\n\r\n\r\n\r\nVisualising tf-idf as Wordcloud\r\n\r\n\r\n#tf_idf %>%\r\n  #filter(str_detect(class, \"^sci\\\\.\")) %>%\r\n#  group_by(class) %>%\r\n#  slice_max(tf_idf, \r\n#            n = 12) %>%\r\n#  ungroup() %>%\r\n#  mutate(word = reorder(word, \r\n#                        tf_idf)) %>%\r\n#  ggplot(aes(tf_idf, \r\n#             word, \r\n#             fill = class)) +\r\n#  geom_col(show.legend = FALSE) +\r\n#  facet_wrap(~ class, \r\n#             ncol = 2,\r\n#             scales = \"free\") +\r\n#  labs(x = \"tf-idf\", \r\n#       y = NULL)\r\n\r\n\r\n\r\nQ2\r\n\r\n\r\nfire_count <- data_classed_token %>% \r\n  filter(str_detect(word,\"fire|Dancing Dolphin Department\")) \r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-07-14-the-sharpe-ratio/the-sharpe-ratio_files/figure-html5/unnamed-chunk-15-1.png",
    "last_modified": "2021-07-21T15:49:20+08:00",
    "input_file": "the-sharpe-ratio.knit.md"
  }
]
